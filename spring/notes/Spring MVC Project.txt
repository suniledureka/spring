DB Operations : MySQL
DB name: edureka

use edureka;

create table GENDER_DETAILS(GENDER_ID integer(5) primary key, GENDER_NAME varchar(10));
create table COURSE_DETAILS(COURSE_ID integer(5) primary key, COURSE_NAME varchar(30));
create table COURSE_TIMINGS(COURSE_TIMINGS_ID integer(5) primary key, COURSE_TIMINGS_NAME varchar(10));

INSERT INTO GENDER_DETAILS values(1,'Male');
INSERT INTO GENDER_DETAILS values(2,'Female');

INSERT INTO COURSE_DETAILS values(1,'Python');
INSERT INTO COURSE_DETAILS values(2,'Java');
INSERT INTO COURSE_DETAILS values(3,'.NET Framework');
INSERT INTO COURSE_DETAILS values(4,'Angular');
INSERT INTO COURSE_DETAILS values(5,'React JS');
INSERT INTO COURSE_DETAILS values(6,'PHP');

INSERT INTO COURSE_TIMINGS values(1, 'Morning');
INSERT INTO COURSE_TIMINGS values(2, 'Afternoon');
INSERT INTO COURSE_TIMINGS values(3, 'Evening');

select * from GENDER_DETAILS;
select * from COURSE_DETAILS;
select * from COURSE_TIMINGS;

***** ---------------------------------------------------------- ******

Create a New Spring Starter Project with below dependencies  :: 07-sb-mvc-student-mysql-db
 - spring-boot-starter-web
 - Spring-boot-devtools
 - spring-data-jpa
 - MySQL Driver
 - Project Lombok
 - jstl
 - tomcat-embed-jasper

***** ---------------------------------------------------------- ******

application.properties

server.port=9090
server.servlet.context-path=/student

spring.mvc.view.prefix=/pages/
spring.mvc.view.suffix=.jsp

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/edureka
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.hibernate.ddl-auto=update

***** ---------------------------------------------------------- ******

Create the required Binding classes - Student, CourseDtlsEntity, GenderDtlsEntity, CourseTimingsEntity

package com.edureka.student.bindings;
import lombok.Data;
@Data
public class Student {
 private Integer studentId;
 private String studentName;
 private String studentGender;
 private String courseName;
 private String[] timings;
}

***** ---------------------------------------------------------- ******
package com.edureka.student.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Data;

@Entity
@Data
@Table(name = "COURSE_DETAILS")
public class CourseDtlsEntity {
 @Id
 @Column(name = "COURSE_ID")
 private Integer courseId;
 
 @Column(name = "COURSE_NAME")
 private String courseName;
}

***** ---------------------------------------------------------- ******
package com.edureka.student.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Data;

@Entity
@Data
@Table(name = "GENDER_DETAILS")
public class GenderDtlsEntity {
 @Id
 @Column(name = "GENDER_ID")
 private Integer genderId;
 
 @Column(name = "GENDER_NAME")
 private String genderName;
}

***** ---------------------------------------------------------- ******
package com.edureka.student.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Data;

@Entity
@Data
@Table(name = "COURSE_TIMINGS")
public class CourseTimingsEntity {
 @Id
 @Column(name = "COURSE_TIMINGS_ID")
 private Integer timingId;
 
 @Column(name = "COURSE_TIMINGS_NAME")
 private String timing;
}

***** ---------------------------------------------------------- ******
Generate the Repository interfaces to work with DB

package co.edureka.student.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import co.edureka.student.entity.CourseDtlsEntity;
import java.io.Serializable;
import java.util.List;

public interface CourseDetailsRepository extends JpaRepository<CourseDtlsEntity, Serializable>{
	@Query("select courseName from CourseDtlsEntity")
	List<String> getCourseNames();

}

***** ---------------------------------------------------------- ******

package co.edureka.student.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import co.edureka.student.entity.GenderDtlsEntity;

public interface GenderDetailsRepository extends JpaRepository<GenderDtlsEntity, Integer> {
	@Query("select genderName from GenderDtlsEntity")
	List<String> getGenderNames();

}

***** ---------------------------------------------------------- ******

package co.edureka.student.repository;

import java.io.Serializable;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import co.edureka.student.entity.CourseTimingsEntity;

public interface CourseTimingsRepository extends JpaRepository<CourseTimingsEntity, Serializable> {
	@Query("select timing from CourseTimingsEntity")
	List<String> getCourseTimings();

}


***** ---------------------------------------------------------- ******
Generate the Service class 

package co.edureka.student.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import co.edureka.student.repository.CourseDetailsRepository;
import co.edureka.student.repository.CourseTimingsRepository;
import co.edureka.student.repository.GenderDetailsRepository;

@Service
public class StudentService {
 @Autowired	
 private CourseDetailsRepository courseDetailsRepo;
 
 @Autowired
 private GenderDetailsRepository genderDetailsRepo;
 
 @Autowired
 private CourseTimingsRepository courseTimimgsRepo;
 
 public List<String> getCourseNames(){
	 List<String> courseNames = courseDetailsRepo.getCourseNames();
	 return courseNames;
 }
 
 public List<String> getGenderText(){
	 List<String> genderTexts = genderDetailsRepo.getGenderNames();
	 return genderTexts;
 } 
 
 public List<String> getCourseTimings(){
	 return courseTimimgsRepo.getCourseTimings();
 }
}

***** ---------------------------------------------------------- ******
Generate the Controller class

package co.edureka.student.controllers;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.edureka.bindings.Student;
import com.edureka.service.StudentService;

@Controller
public class StudentController {
  @Autowired
  private StudentService studentService;

/*  
  @ModelAttribute
  public void init(Model model) {
	  System.out.println("================ init() method called ============");
	  
	  model.addAttribute("genders", studentService.getGenderText());
	  model.addAttribute("courses", studentService.getCourseNames());
	  model.addAttribute("timings", studentService.getCourseTimings());	   
  }
*/
  
  @GetMapping(value = {"/","/addstudent"})	
  public String loadForm(Model model) {
	  model.addAttribute("student", new Student());	 
	  model.addAttribute("genders", studentService.getGenderText());
	  model.addAttribute("courses", studentService.getCourseNames());
	  model.addAttribute("timings", studentService.getCourseTimings());	   
	  return "studentReg";
  }
  
  @PostMapping("/saveStudent")
  public String handleSaveStudent(Student student, BindingResult result, Model model, RedirectAttributes redirectAttributes) {
	  //logic to save student details in DB
	  System.out.println(student);	  

	  //model.addAttribute("student",student);
	  model.addAttribute("selectedTimings", Arrays.toString(student.getTimings()));
	 
	  //return "studentReg";
	  redirectAttributes.addFlashAttribute("student", student);
	  return "redirect:studentSavingSuccess";
  }
  
  @GetMapping("/studentSavingSuccess")
  public String afterStudentSaving(Student student, Model model) {	  
	  System.out.println(student); 	
 	model.addAttribute("student", student); 	
 	 return "studentReg";
  }
}


***** ---------------------------------------------------------- ******
webapps/pages/studentreg.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form" %>
    
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<style>
#wrapper{
	margin:100px auto;	
	width:550px;
	background:linear-gradient(45deg,black,orangered,black);
	color:white;
	padding:10px;
	border-radius:10px;
	box-shadow:0 0 10px black;
}
table{
	font-size:18px;
	width:97%;
}
input{
 font-size:18px;
}
tr{
 height:40px;
}
input[type=submit]{
  margin-top:35px;
  background-color:transparent;
  border:1px solid white;
  padding:3px 25px;
  border-radius:20px;
  color:white;
}
input[type=submit]:hover{  
  background-color:white;
  color:black;
  box-shadow:0 0 10px white;
}
</style>
<title>Student Registration</title>
</head>
<body>
 <div id="wrapper">
  <h2 style="text-align:center">STUDENT REGISTRATION</h2>
  <form:form action="saveStudent" method="post" modelAttribute="student">
    <table>
     <tr>
       <td>
         <label for="sid">Student ID</label>
       </td>
       <td>  
         <form:input path="studentId" required="required" size="25" id="sid"/>
       </td>
     </tr>

     <tr>
       <td>
         <label for="sname">Student Name</label>
       </td>
       <td>  
         <form:input path="studentName" size="25" id="sname"/>
       </td>
     </tr>     
 		
 	 <tr>
 	 	<td>
 	 	 <label for="gen">Gender</label>
 	 	</td>
 	 	<td>
 	 	  <form:radiobuttons path="studentGender" id="gen" items="${genders}"/>
 	 	</td>
 	 </tr>
 	 
	 <tr>
 	 	<td>
 	 	 <label for="course">Select Course</label>
 	 	</td>
 	 	<td>
 	 	  <form:select path="courseName">
 	 	  	<form:options items="${courses}"/>
 	 	  </form:select>
 	 	</td>
 	 </tr> 	 
 	 
	 <tr>
 	 	<td>
 	 	 <label for="timings">Preferred Timings</label>
 	 	</td>
 	 	<td>
 	 	  <form:checkboxes items="${timings}" path="timings"/> 	 	  
 	 	</td>
 	 </tr> 	  	 
 	 <tr>
 	  <td colspan=2 align=center>
 	    <input type=submit value="Save Student"/>
 	  </td>
 	 </tr>
    </table>
  </form:form> 
  </div>
  <hr>
  <hr>
  	<table id="resultTable">
		<caption>Student Details</caption>
		<tr>
			<td>Student ID</td>
			<td>${student.studentId}</td>
		</tr>
		<tr>
			<td>Student Name</td>
			<td>${student.studentName}</td>
		</tr>
		<tr>
			<td>Gender</td>
			<td>${student.studentGender}</td>
		</tr>

		<tr>
			<td>Course</td>
			<td>${student.courseName}</td>
		</tr>

		<tr>
			<td>Preferred Timings</td>			
			<td>${selectedTimings}</td>
		</tr>
	</table>
 </body>
</html>


